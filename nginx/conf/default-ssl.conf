map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# HTTP Server (Redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name angel.synergycodelabs.com api.synergycodelabs.com;
    
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS Server for Frontend
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name angel.synergycodelabs.com;

    ssl_certificate /etc/letsencrypt/live/angel.synergycodelabs.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/angel.synergycodelabs.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/angel.synergycodelabs.com/chain.pem;

    # SSL Parameters
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Root directory for static files
    root /usr/share/nginx/html;
    index index.html;

    location /portfolio/ {
        try_files $uri $uri/ /portfolio/index.html;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    location = /portfolio/404.html {
        internal;
    }
}

# HTTPS Server for API
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.synergycodelabs.com;

    ssl_certificate /etc/letsencrypt/live/api.synergycodelabs.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.synergycodelabs.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/api.synergycodelabs.com/chain.pem;

    # SSL Parameters
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    location / {
        proxy_pass http://host.docker.internal:3002;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Extended timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Disable buffering
        proxy_buffering off;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' '*' always;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}